<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[程序员生产力工具推荐]]></title>
      <url>http://doornote.net/2016/07/20/productivity-tool-recommend/</url>
      <content type="html"><![CDATA[<p><strong>本文持续更新</strong></p>
<blockquote><h2 id="Markdown-写文档利器"><a href="#Markdown-写文档利器" class="headerlink" title="Markdown 写文档利器"></a>Markdown 写文档利器</h2><p><em>Markdown</em>是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[4]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<footer><strong>@引用来源</strong><cite><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">zh.wikipedia.org/wiki/Markdown</a></cite></footer></blockquote>
<ul>
<li>Markdown语法说明：<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Markdown</a></li>
</ul>
<h2 id="plantuml"><a href="#plantuml" class="headerlink" title="plantuml"></a>plantuml</h2><p><em>PlantUML</em>是一个用来绘制UML图的Java类库。支持的UML图包括：时序图、用例图、类图、组件图、活动图。</p>
<ul>
<li><p>example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">Object &lt;|-- ArrayList</div><div class="line"></div><div class="line">Object : equals()</div><div class="line">ArrayList : Object[] elementData</div><div class="line">ArrayList : size()</div><div class="line">@enduml</div></pre></td></tr></table></figure>
<img src="http://www.plantuml.com/plantuml/svg/yq_AIaqkKR2fqTLLS2mgIgpqoImkuUBoXmXRAQGMbYRc56jeSi4bWO8GsUXOXTISrDpKl1ANn99450N5cLMf6fe0">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">start</div><div class="line">if (Graphviz installed?) then (yes)</div><div class="line">:process all\ndiagrams;</div><div class="line">else (no)</div><div class="line">:process only</div><div class="line">__sequence__ and __activity__ diagrams;</div><div class="line">endif</div><div class="line">stop</div><div class="line">@enduml</div></pre></td></tr></table></figure>
<img src="http://www.plantuml.com/plantuml/svg/JOmn3iCW34LtJk6HN24TElOIbImBdCGICHIxaUZfovZrl_U-ENKFia5yTMh79JyGDQTIE3yNy8CLuc1RmjfwJMm6axqr2-sTJdi4BiOGjTwCgcK4HEFFbpKn8f1cGAJaSecFETpw-RK5yzh-">
</li>
<li><p>plantuml语法说明：<a href="http://plantuml.com/sequence.html#Basic_examples" target="_blank" rel="external">http://plantuml.com/sequence.html#Basic_examples</a></p>
</li>
</ul>
<p>本文永久链接： <a href="http://doornote.net/2016/07/20/productivity-tool-recommend/">http://doornote.net/2016/07/20/productivity-tool-recommend/</a> ；欢迎转载。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA多线程编程——生产者消费者模式(1)]]></title>
      <url>http://doornote.net/2016/07/17/java-multithreading-1/</url>
      <content type="html"><![CDATA[<h2 id="生产者消费者问题简述"><a href="#生产者消费者问题简述" class="headerlink" title="生产者消费者问题简述"></a>生产者消费者问题简述</h2><blockquote><p><strong>生产者消费者问题</strong>（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。该问题描述了两个共享固定大小缓冲区的线程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据;</p>
<footer><strong>@Wiki</strong><cite><a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98" target="_blank" rel="external">zh.wikipedia.org/wiki/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98</a></cite></footer></blockquote>
<a id="more"></a>
<p>&ensp;<br>如下图所示：<br>&ensp;<br><img src="/2016/07/17/java-multithreading-1/1-1.PNG" alt="典型的生产者消费者模型" title="典型的生产者消费者模型"></p>
<h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>由以上模型可知缓冲区是建立起两个线程之间数据交互的桥梁；通常我们使用队列充当缓冲区，这里便引入<em>阻塞队列</em>的概念：<br><blockquote><ul>
<li><em>阻塞队列</em>（BlockingQueue） 是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞 队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容 器里拿元素。</li>
</ul>
<footer><strong>@引用来源</strong><cite><a href="http://www.infoq.com/cn/articles/java-blocking-queue/" target="_blank" rel="external">www.infoq.com/cn/articles/java-blocking-queue</a></cite></footer></blockquote><br><!-- more --></p>
<h2 id="简单的泛型阻塞队列的实现"><a href="#简单的泛型阻塞队列的实现" class="headerlink" title="简单的泛型阻塞队列的实现"></a>简单的泛型阻塞队列的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hulala.jmt.pc1.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 队列的实现，支持线程间安全的offer poll操作</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Queue&lt;T&gt; queue;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        queue = <span class="keyword">new</span> LinkedList&lt;T&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向队列尾部添加一个对象</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> t</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> res = queue.offer(t);</div><div class="line">        <span class="keyword">this</span>.notify();</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从队列头部取出一个对象</div><div class="line">     * </div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> InterruptedException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (queue.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.wait();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.queue.poll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回队列长度</div><div class="line">     * </div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.queue.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  代码非常简单，就是通过对Queue对象进行二次封装，这里使用到了synchronized关键字：<br><blockquote><p><em>synchronized</em>是Java中的关键字，是一种同步锁。它修饰的对象有以下几种</p>
<ol>
<li>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； </li>
<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；</li>
<li>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； </li>
<li>修改一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>
</ol>
<footer><strong>@引用来源</strong><cite><a href="http://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="external">blog.csdn.net/luoweifu/article/details/46613015</a></cite></footer></blockquote></p>
<h2 id="生产者消费者模式初步实现"><a href="#生产者消费者模式初步实现" class="headerlink" title="生产者消费者模式初步实现"></a>生产者消费者模式初步实现</h2><p>下面来看看利用以上阻塞队列的<em>生产者消费者模型</em>的初步实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hulala.jmt.pc1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.pojo.BlockingQueue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> BlockingQueue&lt;String&gt;();</div><div class="line">		<span class="comment">//生产者线程</span></div><div class="line">		Thread cosumer = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(queue.poll());</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		cosumer.start();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">3000</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//消费者线程</span></div><div class="line">		Thread producer = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				queue.offer(<span class="string">"I am here"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		producer.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  执行以上代码，会看到控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wait data</div><div class="line">I am here</div></pre></td></tr></table></figure></p>
<p>  <strong>代码执行流程如下：</strong></p>
<ul>
<li>在调用<strong>poll</strong>方法时,在代码块synchronized中会获得当前BlockingQueue实例的对象锁，若队列中无数据，则wait方法会使当前线程进入休眠等待状态，并释放对象锁；</li>
<li>在调用<strong>offer</strong>方法往队尾部添加数据之后，使用notify会时poll方法所在线程重新获取到当前BlockingQueue实例的对象锁，并继续执行wait方法后的代码；</li>
<li>以上测试代码即是一个简单的生产者消费者模型，阻塞队列常用场景就是在生产者消费者问题中。</li>
</ul>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>显而易见的是，实际情况不会像以上例子那么简单，生产者消费者问题，是一个生产者持续产生数据到缓冲区、而消费者持续消耗缓冲区数据的过程；下面我们通过一个例子来说明；<br>现以假设某个电子元件的生产流水线为例：<br>&ensp;<br><img src="/2016/07/17/java-multithreading-1/1-2.PNG" alt="流水线" title="流水线"></p>
<p>通过上图可以很简单的看出这条流水线由4个流程组成，下面以面向对象的思想分析以上流程：</p>
<ol>
<li>4个过程(打磨、抛光、焊接、质检)可抽象为4个操作</li>
<li>每个操作本身都是相对于前一操作来说是消费者，相对于后一操作来说是生产者；</li>
<li>每个操作实现不同（打磨、抛光、焊接、质检）</li>
</ol>
<p><strong>面向对象编程的思想</strong>要求我们找出对象的共同点在对其封装，对其不同点进行抽象。从以上分析我们已找到异同点，这便足以让我们开始写代码了；</p>
<p>首先 把电子元件抽象成一个Pojo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hulala.jmt.pc1.pojo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectronicComponent</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> code;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ElectronicComponent</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.code = code;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">status</span><span class="params">(String opertion)</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"编号："</span> + code  + <span class="string">"正在执行\""</span> + opertion +<span class="string">"\"操作"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是抽象出每个操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hulala.jmt.pc1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(ElectronicComponent ec)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为这边的操作是个抽象概念，并不涉及某个实际内容，所以只需声明函数签名，无需实现函数体，故使用抽象方法（在C++中为虚函数）。</p>
<p>现在已经抽象出不同点了，下面就要继续实现各个模块共同点，共同点由三个：入口、出口、传送带，抽象出来就是数据接收、数据产生、缓冲区(<em>BlockingQueue</em>)，可见这就是一个典型的生产者消费者模型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hulala.jmt.pc1;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</div><div class="line">	<span class="comment">// 缓冲区</span></div><div class="line">	<span class="keyword">private</span> BlockingQueue&lt;ElectronicComponent&gt; queue;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</div><div class="line">		queue = <span class="keyword">new</span> BlockingQueue&lt;ElectronicComponent&gt;();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 数据接收</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> ec</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(ElectronicComponent ec)</span> </span>&#123;</div><div class="line">		queue.offer(ec);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 数据传送</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> oper</div><div class="line">	 * <span class="doctag">@param</span> ec</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Operation oper, ElectronicComponent ec)</span> </span>&#123;</div><div class="line">		oper.receive(ec);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在一个模块的骨架基本完成了，但是光这样还不够，上面说了：生产者消费者模式运行起来是个是个持续过程，所以我们要有一个线程，确保模块接收数据同时可以执行操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOperation</span><span class="params">(Operation oper)</span> </span>&#123;</div><div class="line">  Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      ElectronicComponent ec = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> ((ec = queue.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">        operation(ec);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != oper)</div><div class="line">          send(oper, ec);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  thread.setDaemon(<span class="keyword">false</span>);</div><div class="line">  thread.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>doOperation</strong>目的很明确，启动一个线程，循环从队列中取出数据，执行该模块的operation操作，执行完后传送给下一个模块；<br>现在一个抽象的操作模块已经基本完成，可以具体实现流水线的4个操作了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">DaMo.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaMo</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(ElectronicComponent ec)</span> </span>&#123;</div><div class="line">		ec.status(<span class="string">"打磨"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PaoGuang.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaoGuang</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(ElectronicComponent ec)</span> </span>&#123;</div><div class="line">		ec.status(<span class="string">"抛光"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">HanJie.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanJie</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(ElectronicComponent ec)</span> </span>&#123;</div><div class="line">		ec.status(<span class="string">"焊接"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZhiJian.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhiJian</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(ElectronicComponent ec)</span> </span>&#123;</div><div class="line">		ec.status(<span class="string">"质检"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>写了那么多，终于可以测试一下看看了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//App2.java</span></div><div class="line"><span class="keyword">package</span> com.hulala.jmt.pc1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.operation.DaMo;</div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.operation.HanJie;</div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.operation.Operation;</div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.operation.PaoGuang;</div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.operation.ZhiJian;</div><div class="line"><span class="keyword">import</span> com.hulala.jmt.pc1.pojo.ElectronicComponent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Operation damo = <span class="keyword">new</span> DaMo();</div><div class="line">		Operation paoguang = <span class="keyword">new</span> PaoGuang();</div><div class="line">		Operation hanjie = <span class="keyword">new</span> HanJie();</div><div class="line">		Operation zhijian = <span class="keyword">new</span> ZhiJian();</div><div class="line">		zhijian.doOperation(<span class="keyword">null</span>);</div><div class="line">		hanjie.doOperation(zhijian);</div><div class="line">		paoguang.doOperation(hanjie);</div><div class="line">		damo.doOperation(paoguang);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">5</span>; ++i) &#123;</div><div class="line">			damo.receive(<span class="keyword">new</span> ElectronicComponent(i));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行以上main方法，看控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">编号：1正在执行&quot;打磨&quot;操作</div><div class="line">编号：2正在执行&quot;打磨&quot;操作</div><div class="line">编号：0正在执行&quot;抛光&quot;操作</div><div class="line">编号：3正在执行&quot;打磨&quot;操作</div><div class="line">编号：4正在执行&quot;打磨&quot;操作</div><div class="line">编号：0正在执行&quot;焊接&quot;操作</div><div class="line">编号：1正在执行&quot;抛光&quot;操作</div><div class="line">编号：0正在执行&quot;质检&quot;操作</div><div class="line">编号：2正在执行&quot;抛光&quot;操作</div><div class="line">编号：1正在执行&quot;焊接&quot;操作</div><div class="line">编号：3正在执行&quot;抛光&quot;操作</div><div class="line">编号：1正在执行&quot;质检&quot;操作</div><div class="line">编号：2正在执行&quot;焊接&quot;操作</div><div class="line">编号：4正在执行&quot;抛光&quot;操作</div><div class="line">编号：3正在执行&quot;焊接&quot;操作</div><div class="line">编号：2正在执行&quot;质检&quot;操作</div><div class="line">编号：4正在执行&quot;焊接&quot;操作</div><div class="line">编号：3正在执行&quot;质检&quot;操作</div><div class="line">编号：4正在执行&quot;质检&quot;操作</div></pre></td></tr></table></figure></p>
<p>因为是多个线程异步执行，所以每次运行打出顺序可能会不一样。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此为止，一个完整的流水线算是初步完成了，在上面分析及设计过程中：</p>
<ul>
<li>封装对象的共同点，抽象对象的不同点是程序设计实现一个非常好的思路；</li>
<li>我们都用到了面向对象的三个基本特征：继承、封装、多态，类图关系如下：<img src="http://www.plantuml.com/plantuml/svg/XP2z2i9G38Nd-XGP5RNWBWx-e0YYhcun3VNgRLBRMn5AtrrhjOeepP3bV3avd1ZfX243QUGVCeiM_MFa_9W6liQSe3CgUGlkW_lK9KWEo6AQmlgbGYMNqnzRfPEHS9jnniEPPNA9Yg69Hh4AYnl1kPJgYsx-iYtgT-qVTy3KQNbUzw8cW8I9pOKRkK3haErttFBFcqbPWY-n1_-C7x6BnwvAcE9AWQ_kRlBHIFxal0hQeCupbB0HNA0i3JTYkuDP6fJ_N743"></li>
<li>生产者消费者模式是我们在多线程编程当中经常碰到的问题，掌握该模式足以让我们应付绝大多数多个线程之间数据交互的问题。</li>
</ul>
<p>以上代码未考虑缓冲区溢出，省略了异常捕获，要真正用于生产环境这些都是要考略的。</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>完整代码的Github项目地址：<em><a href="https://github.com/hulala1021/producer-consumer" target="_blank" rel="external">producer-consumer</a></em><br>&ensp;<br><div style="text-align:center">
  <div class="github-card" data-user="hulala1021" data-repo="producer-consumer" data-width="400" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
<br>&ensp;</p>
<p>本文永久链接： <a href="http://doornote.net/2016/07/17/java-multithreading-1/">http://doornote.net/2016/07/17/java-multithreading-1/</a> ；欢迎转载。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Win32Api实现的一个简单的贪食蛇游戏]]></title>
      <url>http://doornote.net/2016/07/14/win32-gluttony-snake/</url>
      <content type="html"><![CDATA[<p>这是大学时期写的代码，当时看<a href="https://www.amazon.cn/Windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E4%BD%A9%E6%8E%AA%E5%B0%94%E5%BE%B7/dp/B00426BTC6/ref=sr_1_2?ie=UTF8&amp;qid=1468484710&amp;sr=8-2&amp;keywords=windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="external">Windows程序设计(第5版)</a>学习利用Win32Api编程，当时还没毕业，课程讲到Winform编程，便想通过对Win32Api的学习多了解Winform的一些比较底层实现。<br><a id="more"></a><br>废话不多说，直接上代码：<br><figure class="highlight c"><figcaption><span>贪食蛇游戏++</span><a href="/downloads/code/cpp/gluttonysnake.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************************</span></div><div class="line">		贪食蛇 Preview</div><div class="line">		此版本贪吃蛇用蛇的方块是集合用的是数组</div><div class="line">		蛇移动是以Sleep()阻断进程实现的</div><div class="line">		故蛇移动看似较为卡顿，且数组插入数据效率较低，</div><div class="line">		故操作体验十分一般</div><div class="line">*******************************************************************/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"winmm.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 40					<span class="comment">//游戏场地的宽</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDTH 10					<span class="comment">//组成蛇的的正方形的边长</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RANGE 50					<span class="comment">//游戏场地与客户去之间间隔</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SNAKE_COLOR RGB(255,0,0)	  <span class="comment">//蛇的颜色</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BK_COLOR	RGB(204,232,207)  <span class="comment">//窗体背景色</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NO_SNAKE 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HAS_SNAKE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STEP 2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAKECOOR(x) (x)*WIDTH		<span class="comment">//把flags数组的下标映射为坐标</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">{</div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">int</span> y;</div><div class="line">	<span class="keyword">int</span> flag;</div><div class="line">} GRID;<span class="comment">//蛇的结构</span></div><div class="line"></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND,UINT,WPARAM,LPARAM)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakePartSnake</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,GRID *)</span></span>;	<span class="comment">//为蛇身增加或设置一个方块</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveSnake</span><span class="params">(HWND)</span></span>;				<span class="comment">//移动蛇</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeFood</span><span class="params">(GRID *food)</span></span>;			<span class="comment">//制造随机方块</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializer</span><span class="params">()</span></span>;				<span class="comment">//初始化游戏</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">TCHAR szAppName[] = TEXT(<span class="string">"Gluttony Snake"</span>);</div><div class="line"><span class="keyword">int</span> flags[LENGTH][LENGTH];	<span class="comment">//游戏区域所有方块的状态标记</span></div><div class="line">RECT playground;		<span class="comment">//游戏场地</span></div><div class="line">GRID *snake = <span class="literal">NULL</span>;	<span class="comment">//蛇所在位置数组</span></div><div class="line">GRID *food = <span class="literal">NULL</span>;	<span class="comment">//食物对象</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> MAX_LENGTH = <span class="number">0</span>;<span class="comment">//默认蛇分配的最大长度（可变的）</span></div><div class="line"><span class="keyword">int</span> snake_len = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> direct = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,</span></span></div><div class="line">				   HINSTANCE hPrevInstance,</div><div class="line">				   PSTR szCmdLine,</div><div class="line">				   <span class="keyword">int</span> iCmdShow)</div><div class="line">{</div><div class="line">	MSG msg;</div><div class="line">	HWND hwnd;</div><div class="line">	WNDCLASS wndclass;</div><div class="line">	<span class="keyword">while</span>(TRUE)</div><div class="line">	{</div><div class="line">		wndclass.cbClsExtra = <span class="number">0</span>;</div><div class="line">		wndclass.cbWndExtra = <span class="number">0</span>;</div><div class="line">		wndclass.hbrBackground=CreateSolidBrush(RGB(<span class="number">203</span>,<span class="number">202</span>,<span class="number">201</span>));</div><div class="line">		wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>,IDI_APPLICATION);</div><div class="line">		wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>,IDC_ARROW);</div><div class="line">		wndclass.hInstance = hInstance;</div><div class="line">		wndclass.lpfnWndProc = WndProc;</div><div class="line">		wndclass.lpszMenuName = <span class="literal">NULL</span>;</div><div class="line">		wndclass.lpszClassName = szAppName;</div><div class="line">		wndclass.style = CS_VREDRAW | CS_HREDRAW;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(!RegisterClass(&amp;wndclass))</div><div class="line">		{</div><div class="line">			MessageBox(<span class="literal">NULL</span>,TEXT(<span class="string">"Register class failed!! Retry??"</span>),szAppName,<span class="number">0</span>);</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	}</div><div class="line">	hwnd = CreateWindow(szAppName,</div><div class="line">			TEXT(<span class="string">"Gluttony Snake Preview V1.0.1"</span>),</div><div class="line">			WS_OVERLAPPEDWINDOW ^ WS_THICKFRAME ^ WS_MINIMIZEBOX ^ WS_MAXIMIZEBOX,</div><div class="line">			CW_USEDEFAULT,</div><div class="line">			CW_USEDEFAULT,</div><div class="line">			CW_USEDEFAULT,</div><div class="line">			CW_USEDEFAULT,</div><div class="line">			<span class="literal">NULL</span>,<span class="literal">NULL</span>,</div><div class="line">			hInstance,</div><div class="line">			<span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	ShowWindow(hwnd,SW_NORMAL);</div><div class="line">	UpdateWindow(hwnd);</div><div class="line">	<span class="keyword">while</span>(TRUE)</div><div class="line">	{</div><div class="line">		<span class="keyword">if</span>(PeekMessage(&amp;msg,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>,PM_REMOVE))</div><div class="line">		{</div><div class="line">			<span class="keyword">if</span>(msg.message == WM_QUIT)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			TranslateMessage(&amp;msg);</div><div class="line">			DispatchMessage(&amp;msg);</div><div class="line">		}</div><div class="line">		<span class="keyword">else</span></div><div class="line">		{</div><div class="line">			MoveSnake(hwnd);</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> msg.wParam;</div><div class="line">}</div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd,UINT message,WPARAM wParam,LPARAM lParam)</span></span></div><div class="line">{</div><div class="line">	HDC hdc;</div><div class="line">	PAINTSTRUCT ps;</div><div class="line">	HBRUSH hBrush;</div><div class="line">	<span class="keyword">switch</span>(message)</div><div class="line">	{</div><div class="line">	<span class="keyword">case</span> WM_DESTROY:</div><div class="line">		PostQuitMessage(<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> WM_CREATE:</div><div class="line">		<span class="comment">//PlaySound(TEXT("HG.wav"),NULL ,SND_ASYNC | SND_LOOP);//播放游戏音乐；</span></div><div class="line">		initializer();</div><div class="line">			MoveWindow(hwnd,</div><div class="line">			RANGE * <span class="number">2</span>,</div><div class="line">			RANGE * <span class="number">2</span>,</div><div class="line">			WIDTH * LENGTH + RANGE * <span class="number">3</span>,</div><div class="line">			WIDTH * LENGTH + RANGE * <span class="number">3</span>,</div><div class="line">			TRUE);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">case</span> WM_KEYDOWN:</div><div class="line">		<span class="keyword">switch</span>(wParam)</div><div class="line">		{</div><div class="line">		<span class="keyword">case</span> VK_LEFT:</div><div class="line">			<span class="keyword">if</span>(direct != VK_RIGHT)</div><div class="line">				direct = VK_LEFT;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> VK_RIGHT:</div><div class="line">			<span class="keyword">if</span>(direct != VK_LEFT)</div><div class="line">				direct = VK_RIGHT;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> VK_UP:</div><div class="line">			<span class="keyword">if</span>(direct != VK_DOWN)</div><div class="line">				direct = VK_UP;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> VK_DOWN:</div><div class="line">			<span class="keyword">if</span>(direct != VK_UP)</div><div class="line">				direct = VK_DOWN;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> WM_PAINT:</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != snake_len; ++i)</div><div class="line">		{</div><div class="line">			flags[(snake + i)-&gt;x][(snake + i)-&gt;y] = (snake + i)-&gt;flag;</div><div class="line">		}</div><div class="line">		hdc = BeginPaint(hwnd,&amp;ps);</div><div class="line">		SetViewportOrgEx(hdc,RANGE/<span class="number">2</span>,RANGE,<span class="literal">NULL</span>);</div><div class="line">		hBrush = CreateSolidBrush(BK_COLOR);</div><div class="line">		SelectObject(hdc,hBrush);</div><div class="line">		Rectangle(hdc,</div><div class="line">			playground.left,</div><div class="line">			playground.top,</div><div class="line">			playground.right,</div><div class="line">			playground.bottom);</div><div class="line">		DeleteObject(hBrush);</div><div class="line">		hBrush = CreateSolidBrush(SNAKE_COLOR);</div><div class="line">		SelectObject(hdc,hBrush);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != LENGTH;++i)</div><div class="line">		{</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j != LENGTH;++j)</div><div class="line">			{</div><div class="line">				<span class="keyword">if</span>(flags[i][j] == HAS_SNAKE)</div><div class="line">				{</div><div class="line">					Rectangle(hdc,</div><div class="line">						MAKECOOR(i),</div><div class="line">						MAKECOOR(j),</div><div class="line">						MAKECOOR(i+<span class="number">1</span>),</div><div class="line">						MAKECOOR(j+<span class="number">1</span>));</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">		DeleteObject(hBrush);</div><div class="line">		EndPaint(hwnd,&amp;ps);</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> DefWindowProc(hwnd,message,wParam,lParam);</div><div class="line">}</div><div class="line"><span class="comment">//初始化游戏各个参数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializer</span><span class="params">()</span></span></div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(snake != <span class="literal">NULL</span>)</div><div class="line">		<span class="built_in">free</span>(snake);</div><div class="line">	<span class="keyword">if</span>(food != <span class="literal">NULL</span>)</div><div class="line">		<span class="built_in">free</span>(food);</div><div class="line">	snake_len = <span class="number">3</span>;		<span class="comment">//蛇的初始长度为3</span></div><div class="line">	direct = VK_RIGHT;	<span class="comment">//蛇的初始方向为向右</span></div><div class="line">	MAX_LENGTH = <span class="number">100</span>;	<span class="comment">//蛇默认最初分配最大长度为20</span></div><div class="line">	food = (GRID *)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(GRID));<span class="comment">//分配储存food的内存</span></div><div class="line">	snake = (GRID *)<span class="built_in">calloc</span>(MAX_LENGTH,<span class="keyword">sizeof</span>(GRID));<span class="comment">//分配储存蛇的内存</span></div><div class="line">	<span class="comment">/*************初始化游戏场地*******************/</span></div><div class="line">	playground.left = <span class="number">0</span>;</div><div class="line">	playground.top = <span class="number">0</span>;</div><div class="line">	playground.right = WIDTH * LENGTH;</div><div class="line">	playground.bottom = WIDTH * LENGTH;</div><div class="line">	<span class="comment">/**************初始化游戏场地********************/</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; LENGTH;++i)</div><div class="line">	{</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; LENGTH;++j)</div><div class="line">		{</div><div class="line">			flags[i][j] = NO_SNAKE;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != snake_len;++i)</div><div class="line">	{</div><div class="line">		MakePartSnake(LENGTH / <span class="number">2</span> + <span class="number">2</span> - i,LENGTH / <span class="number">2</span>,HAS_SNAKE,(snake + i));</div><div class="line">	}<span class="comment">///初始化蛇</span></div><div class="line">	MakeFood(food);<span class="comment">///产生food</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakePartSnake</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> flag,GRID * snake)</span></span></div><div class="line">{</div><div class="line">	snake-&gt;x = x;</div><div class="line">	snake-&gt;y = y;</div><div class="line">	snake-&gt;flag = flag;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//控制蛇的移动</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveSnake</span><span class="params">(HWND hwnd)</span></span></div><div class="line">{</div><div class="line">	Manager();</div><div class="line">	<span class="comment">//把蛇的尾部去除（表现为蛇移动一格）</span></div><div class="line">	flags[(snake + snake_len - <span class="number">1</span>)-&gt;x][(snake + snake_len - <span class="number">1</span>)-&gt;y] = NO_SNAKE;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = snake_len - <span class="number">1</span>; i &gt; <span class="number">0</span>;--i)</div><div class="line">	{</div><div class="line">		(snake+i)-&gt;x = (snake + i <span class="number">-1</span>)-&gt;x;</div><div class="line">		(snake+i)-&gt;y = (snake + i <span class="number">-1</span>)-&gt;y;</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span>(direct == VK_LEFT)</div><div class="line">	{</div><div class="line">		snake-&gt;x -= <span class="number">1</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span>(direct == VK_RIGHT)</div><div class="line">	{</div><div class="line">		snake-&gt;x += <span class="number">1</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span>(direct == VK_UP)</div><div class="line">	{</div><div class="line">		snake-&gt;y -= <span class="number">1</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span>(direct == VK_DOWN)</div><div class="line">	{</div><div class="line">		snake-&gt;y += <span class="number">1</span>;</div><div class="line">	}</div><div class="line">	InvalidateRect(hwnd,<span class="literal">NULL</span>,FALSE);</div><div class="line">	Sleep(<span class="number">200</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//通过随机生成food</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeFood</span><span class="params">(GRID *food)</span></span></div><div class="line">{</div><div class="line">	srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>));</div><div class="line">	food-&gt;x = rand() % LENGTH;</div><div class="line">	food-&gt;y = rand() % LENGTH;</div><div class="line">	food-&gt;flag = HAS_SNAKE;</div><div class="line">	flags[food-&gt;x][food-&gt;y] = food-&gt;flag;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//游戏规则的映射及内存的处理</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager</span><span class="params">()</span></span></div><div class="line">{</div><div class="line">	<span class="keyword">if</span>(snake_len &gt;= MAX_LENGTH - <span class="number">2</span>)</div><div class="line">	{</div><div class="line">		MAX_LENGTH += STEP;</div><div class="line">		snake = (GRID *)<span class="built_in">realloc</span>(snake,MAX_LENGTH * <span class="keyword">sizeof</span>(GRID));</div><div class="line">	}<span class="comment">//若蛇的长度数组snake将超过所分配的内存就再次扩充分配</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span>(snake-&gt;x &lt; <span class="number">0</span> || snake-&gt;x &gt;= LENGTH || snake-&gt;y &lt; <span class="number">0</span> || snake-&gt;y &gt;= LENGTH)</div><div class="line">	{</div><div class="line">		MessageBox(<span class="literal">NULL</span>,TEXT(<span class="string">"Game Over!!"</span>),szAppName,<span class="number">0</span>);</div><div class="line">		initializer();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	}<span class="comment">///判断蛇是否碰到边界</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>;i &lt; snake_len;++i)</div><div class="line">	{</div><div class="line">		<span class="keyword">if</span>(snake-&gt;x == (snake + i)-&gt;x &amp;&amp; snake-&gt;y == (snake + i)-&gt;y)</div><div class="line">		{</div><div class="line">			MessageBox(<span class="literal">NULL</span>,TEXT(<span class="string">"Game Over!!"</span>),szAppName,<span class="number">0</span>);</div><div class="line">			initializer();</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}</div><div class="line">	}<span class="comment">////判断蛇是否碰到自身</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span>(food-&gt;x == snake-&gt;x &amp;&amp; food-&gt;y == snake-&gt;y)</div><div class="line">	{</div><div class="line">		MakePartSnake(</div><div class="line">					(snake + snake_len - <span class="number">1</span>)-&gt;x</div><div class="line">					,(snake + snake_len - <span class="number">1</span>)-&gt;y</div><div class="line">					,HAS_SNAKE</div><div class="line">					,snake + snake_len</div><div class="line">					);</div><div class="line">		++snake_len;</div><div class="line">		MakeFood(food);</div><div class="line">	}<span class="comment">///判断蛇是否吃到food</span></div><div class="line">}</div></pre></td></tr></table></figure><br>代码在VS2010下编译运行(<em>我使用的开发环境，VS其它版本也可以</em>)，可见游戏界面如下：<br><img src="/2016/07/14/win32-gluttony-snake/1-1.PNG" alt="贪食蛇游戏界面" title="贪食蛇游戏界面"><br>&ensp;<br>以上代码未考虑通关情况，也就是如果水平够高蛇会把格子占满，然后Game over。<br><strong>注:</strong> 若在编译时报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error LNK2019: 无法解析的外部符号 _main，该符号在函数 ___tmainCRTStart</div></pre></td></tr></table></figure></p>
<p>可按以下方法解决：</p>
<ul>
<li>右键点击–&gt;项目，选择–&gt;属性，属性页 窗口弹出；</li>
<li>接着，点击连接器-&gt;系统，在右侧会看到“子系统”选项，将选项改为<strong>/subsystem:windows</strong>.</li>
</ul>
<p>最后附上Github项目地址：<em><a href="https://github.com/hulala1021/gluttonysnake" target="_blank" rel="external">gluttonysnake</a></em><br><div style="text-align:center">
  <div class="github-card" data-user="hulala1021" data-repo="gluttonysnake" data-width="400" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
</p>
<p>本文永久链接： <a href="http://doornote.net/2016/07/14/win32-gluttony-snake/">http://doornote.net/2016/07/14/win32-gluttony-snake/</a> ；欢迎转载。</p>
]]></content>
    </entry>
    
  
  
</search>
